// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
var MemStorage = class {
  users;
  projects;
  testimonials;
  currentId;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.projects = /* @__PURE__ */ new Map();
    this.testimonials = /* @__PURE__ */ new Map();
    this.currentId = 1;
    this.initializeMockData();
  }
  initializeMockData() {
    const sampleProjects = [
      {
        id: 1,
        title: "Suprema",
        description: "Create a clear roadmap, track progress, and smoothly guide your project from idea to successful launch.",
        longDescription: "Our comprehensive platform helps teams stay organized and efficient throughout the entire development lifecycle.",
        category: "websites",
        imageUrl: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600",
        hoverImageUrl: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600",
        projectUrl: "#",
        featured: true
      }
    ];
    const sampleTestimonials = [
      {
        id: 1,
        name: "Sarah Johnson",
        company: "TechCorp",
        role: "Marketing Director",
        content: "Exceptional work quality and attention to detail. Highly recommend!",
        avatarUrl: "https://images.unsplash.com/photo-1494790108755-2616b612b77c?ixlib=rb-1.2.1&auto=format&fit=crop&w=150&h=150",
        rating: 5
      }
    ];
    sampleProjects.forEach((project) => this.projects.set(project.id, project));
    sampleTestimonials.forEach((testimonial) => this.testimonials.set(testimonial.id, testimonial));
  }
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByUsername(username) {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }
  async createUser(insertUser) {
    const id = this.currentId++;
    const user = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  async getProjects() {
    return Array.from(this.projects.values());
  }
  async getTestimonials() {
    return Array.from(this.testimonials.values());
  }
};
var storage = new MemStorage();

// server/content-updater.ts
import fs from "fs/promises";
import path from "path";
var sectionFileMap = {
  branding: "branding.ts",
  hero: "hero.ts",
  services: "services.ts",
  winningEdge: "winning-edge.ts",
  heroSectionsShowcase: "hero-sections-showcase.ts",
  testimonials: "testimonials-content.ts",
  faq: "faq.ts",
  finalCta: "final-cta.ts",
  works: "works.ts",
  projects: "works-projects.ts",
  footer: "footer.ts",
  process: "process.ts"
};
async function updateSectionFile(sectionName, data) {
  const fileName = sectionFileMap[sectionName];
  if (!fileName) {
    throw new Error(`Unknown section: ${sectionName}`);
  }
  const filePath = path.join(process.cwd(), "client", "src", "data", fileName);
  let variableName = sectionName;
  if (sectionName === "testimonials") variableName = "testimonialsContent";
  if (sectionName === "projects") variableName = "worksProjects";
  if (sectionName === "footer") variableName = "footerContent";
  const tsContent = `export const ${variableName} = ${JSON.stringify(data, null, 2)};`;
  await fs.writeFile(filePath, tsContent, "utf-8");
}
async function getAllSections() {
  const dataDir = path.join(process.cwd(), "client", "src", "data");
  const sections = {};
  for (const [sectionName, fileName] of Object.entries(sectionFileMap)) {
    try {
      const filePath = path.join(dataDir, fileName);
      const fileContent = await fs.readFile(filePath, "utf-8");
      const match = fileContent.match(/export const \w+ = ({[\s\S]*});/);
      if (match) {
        try {
          const func = new Function("return " + match[1]);
          sections[sectionName] = func();
        } catch (evalError) {
          console.warn(`Failed to evaluate section ${sectionName}:`, evalError);
          try {
            let objectStr = match[1];
            objectStr = objectStr.replace(/(\w+):/g, '"$1":');
            objectStr = objectStr.replace(/'/g, '"');
            objectStr = objectStr.replace(/,(\s*[}\]])/g, "$1");
            sections[sectionName] = JSON.parse(objectStr);
          } catch (jsonError) {
            console.error(`Failed to parse section ${sectionName} with both methods:`, jsonError);
          }
        }
      }
    } catch (error) {
      console.warn(`Failed to load section ${sectionName}:`, error);
    }
  }
  return sections;
}

// server/routes.ts
async function registerRoutes(app2) {
  app2.get("/api/projects", async (req, res) => {
    try {
      const projects = await storage.getProjects();
      res.json(projects);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch projects" });
    }
  });
  app2.get("/api/testimonials", async (req, res) => {
    try {
      const testimonials = await storage.getTestimonials();
      res.json(testimonials);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch testimonials" });
    }
  });
  app2.get("/api/content", async (req, res) => {
    try {
      const content = await getAllSections();
      res.json(content);
    } catch (error) {
      console.error("Failed to fetch content:", error);
      res.status(500).json({ message: "Failed to fetch content" });
    }
  });
  app2.post("/api/content", async (req, res) => {
    try {
      const updatedContent = req.body;
      if (!updatedContent || typeof updatedContent !== "object") {
        return res.status(400).json({ message: "Invalid content data" });
      }
      const updatePromises = Object.entries(updatedContent).map(async ([sectionName, sectionData]) => {
        try {
          await updateSectionFile(sectionName, sectionData);
        } catch (error) {
          console.error(`Failed to update section ${sectionName}:`, error);
          throw error;
        }
      });
      await Promise.all(updatePromises);
      res.json({ success: true, message: "All content sections updated successfully" });
    } catch (error) {
      console.error("Failed to update content:", error);
      res.status(500).json({ message: "Failed to update content" });
    }
  });
  app2.patch("/api/content/:section", async (req, res) => {
    try {
      const { section } = req.params;
      const sectionData = req.body;
      await updateSectionFile(section, sectionData);
      res.json({ success: true, message: `${section} section updated successfully` });
    } catch (error) {
      console.error(`Failed to update ${req.params.section} section:`, error);
      res.status(500).json({ message: `Failed to update ${req.params.section} section` });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs2 from "fs";
import path3 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path2 from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path2.resolve(import.meta.dirname, "client", "src"),
      "@shared": path2.resolve(import.meta.dirname, "shared"),
      "@assets": path2.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path2.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path2.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path3.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs2.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path3.resolve(import.meta.dirname, "public");
  if (!fs2.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path3.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path4 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path4.startsWith("/api")) {
      let logLine = `${req.method} ${path4} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use("/attached_assets", express2.static("attached_assets"));
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();
Explain